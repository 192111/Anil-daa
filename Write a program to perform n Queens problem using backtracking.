#include <stdio.h>

#define N 8 // Change N to the desired board size

void printSolution(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%2d ", board[i][j]);
        }
        printf("\n");
    }
}

int isSafe(int board[N][N], int row, int col) {
    int i, j;

    // Check left side of the current row
    for (i = 0; i < col; i++) {
        if (board[row][i])
            return 0;
    }

    // Check upper diagonal on left side
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j])
            return 0;
    }

    // Check lower diagonal on left side
    for (i = row, j = col; j >= 0 && i < N; i++, j--) {
        if (board[i][j])
            return 0;
    }

    return 1;
}

int solveNQueensUtil(int board[N][N], int col) {
    if (col >= N)
        return 1;

    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 1;

            if (solveNQueensUtil(board, col + 1))
                return 1;

            board[i][col] = 0; // If placing a queen at board[i][col] doesn't lead to a solution, backtrack
        }
    }

    return 0; // If no queen can be placed in this column, return false
}

int solveNQueens() {
    int board[N][N] = {0};

    if (solveNQueensUtil(board, 0) == 0) {
        printf("Solution does not exist\n");
        return 0;
    }

    printSolution(board);
    return 1;
}


