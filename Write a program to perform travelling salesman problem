#include <stdio.h>
#include <limits.h>

#define N 4 // Number of cities

// Function to find the minimum of two values
int min(int a, int b) {
    return (a < b) ? a : b;
}

// Function to solve the TSP using dynamic programming
int tsp(int graph[N][N], int mask, int pos, int dp[N][1 << N]) {
    // If all cities have been visited
    if (mask == (1 << N) - 1)
        return graph[pos][0]; // Return to the starting city

    // If the solution has already been computed
    if (dp[pos][mask] != -1)
        return dp[pos][mask];

    int minCost = INT_MAX;
    for (int city = 0; city < N; city++) {
        // Check if the city is not visited yet
        if ((mask & (1 << city)) == 0) {
            int newMask = mask | (1 << city);
            int cost = graph[pos][city] + tsp(graph, newMask, city, dp);
            minCost = min(minCost, cost);
        }
    }

    return dp[pos][mask] = minCost;
}

int main() {
    int graph[N][N] = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };

    int dp[N][1 << N];
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < (1 << N); j++) {
            dp[i][j] = -1;
        }
    }

    // Start from the first city (0) and mask indicating only the first city is visited
    int minCost = tsp(graph, 1, 0, dp);

    printf("Minimum cost for TSP: %d\n", minCost);

    return 0;
}
ï¿¼Enter
